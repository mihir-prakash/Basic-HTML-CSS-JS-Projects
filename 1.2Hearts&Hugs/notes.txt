Some important functions to Draw On Canvas using context object (which is a toolkit):

    1. ctx.beginPath()
        Purpose: This method begins a new path by emptying the list of sub-paths. It allows you to start drawing a new shape without connecting it to the previous shapes, to save unintended connections.
    
    2. ctx.moveTo(x, y)
        Purpose: This method moves the "pen" to the specified coordinates (x, y) without drawing anything. It sets the starting point for a new sub-path.
        In short, it sets the pen to the point jaha se draw krna start krna hai
    
    3. ctx.lineTo(x, y)
        This method adds a new point and creates a line from the last point in the current path to the specified coordinates (x, y). It doesn't actually draw the line; it just defines the path of the line.
        ctx.lineTo(e.offsetX, e.offsetY): This method adds a line to the current path, starting from the position specified by ctx.moveTo(lastX, lastY) to the position specified by e.offsetX, e.offsetY.
    
    4. ctx.stroke()
        Purpose: This method actually draws the path that has been defined using moveTo and lineTo commands (or other path commands). It renders the outline of the path using the current stroke style.

    Understanding the code:
    
    // Start a new path
    ctx.beginPath();

    // Move the pen to the starting point (lastX, lastY)
    // This sets the current position for the next drawing command
    ctx.moveTo(lastX, lastY);

    // Define a line from the current position to the new position (e.offsetX, e.offsetY)
    // This doesn't draw the line yet; it just specifies the path
    ctx.lineTo(e.offsetX, e.offsetY);

    // Draw the path defined by the previous commands (moveTo and lineTo)
    // This renders the line on the canvas
    ctx.stroke();


MORE ABOUT CONTEXT:

    The getContext() method is used with the HTML <canvas> element to obtain a rendering context. This context provides the methods and properties needed to draw and manipulate graphics on the canvas. The most commonly used contexts are 2d for two-dimensional drawings and webgl for three-dimensional graphics using WebGL.
    Imagine you have a blank piece of paper (the canvas), and the 2D context is your set of drawing tools, such as pens, brushes, and paints, which you can use to create pictures, shapes, and text on that paper.

TARGET & VALUE PROPERTY OF EVENT:

    The target property of the event object refers to the DOM element that triggered the event.
    In the context of an input element, e.target would refer to the input element itself (like a text box, checkbox, or color picker).
    
    The value property of the target element refers to the current value of that element.

offsetX and offsetY PROPERTIES OF EVENT OBJECT:

     e.offsetX: This property gives the horizontal (X-axis) coordinate of the mouse pointer relative to the target element (the canvas) at the time the event was triggered. It measures the distance in pixels from the left edge of the canvas to the point where the mouse event occurred.

    e.offsetY:This property gives the vertical (Y-axis) coordinate of the mouse pointer relative to the target element (the canvas) at the time the event was triggered. It measures the distance in pixels from the top edge of the canvas to the point where the mouse event occurred.

    These properties provide the current position of the mouse pointer relative to the canvas when the event is triggered.


DRAWING A RECTANGLE:
    fillRect(x, y, width, height) Method: Draws a filled rectangle at the specified coordinates with the specified width and height. Origin --> Top left corner of canvas. 
    x and y coordinates are of the top left corner of the rectangle that would be created.


SAVING & RETRIEVING DATA TO COMPUTER: (Methods involved)

    1. localStorage is an inbuilt feature in modern web browsers that allows you to store data in key-value pairs within the user's browser. This data persists even after the browser is closed and reopened, unlike sessionStorage, which only stores data for the duration of the page session.
        We're storing our content in local storage so that we can retirve it later on.

        // Storing data
        localStorage.setItem('key', 'value');

        // Retrieving data
        let value = localStorage.getItem('key');

        // Removing data
        localStorage.removeItem('key');

        // Clearing all data
        localStorage.clear();
    
    Hence, localStorage.setItem('canvasContents', canvas.toDataURL()) -> Saves the current state of the canvas as a Base64-encoded string in the browser's local storage.

    2. Creating a Download Link:
        let link = document.createElement('a');
        link.download = 'my-canvas.png';

        Purpose: Sets the download attribute of the anchor element, specifying the name of the file to be downloaded.

        link.href = canvas.toDataURL();
        Purpose: Sets the href attribute of the anchor element to the data URL of the canvas content.(data URL is a string representing the current content of the canvas.)

    3. link.click() --> Programmatically triggers a click event on the anchor element, initiating the download of the canvas content as an image file.
    

DRAWING AN IMAGE ON CANVAS:

    1. ctx.drawImage(img, 0, 0) --> img: The image object to draw.
0: The x-coordinate on the canvas where the image will be placed.
0: The y-coordinate on the canvas where the image will be placed.






